var util = require('util');
var events = require('events');
var net = require('net');

var Kallisti = function() {
	events.EventEmitter.call(this);
	var self = this;

	var HEADER_BYTE_LENGTH = 4;
	var netClient = null;

	var team_id = null;

	/**
	 * Connects to the Barracuda Contest server
	 */
	self.connect = function(host, port) {
		if (!port) port = 9999;
		if (!host) host = 'cuda.contest';

		netClient = net.connect(port, host, function() {
			self.emit('connect');
		});

		/**
		 * Dispatches our recursive message handler
		 */
		netClient.on('data', function(newBuffer) {
			//console.log(newBuffer.toString());
			self.recursiveMessageHandler(newBuffer);
		});

		netClient.on('end', function() {
			self.emit('end');
		});

        netClient.on('error', function (evt) {
            console.log("Error connecting: " + evt.code + ". Trying again in ten seconds.");
            setTimeout(function(){self.connect(host, port)}, 10000);
        })
	};


	/**
	 * Recursive function to keep reading chunks of a message
	 */
	self.recursiveMessageHandler = function(buffer) {
		var reportedBufferLength = buffer.slice(0, HEADER_BYTE_LENGTH).readUInt32BE(0); // Read the first few bytes to get the reported length
		buffer = buffer.slice(HEADER_BYTE_LENGTH); // Chop off the beginning length

		var rawObject = buffer.slice(0, reportedBufferLength).toString(); // Get part first message off of the list
		var object = null;

		buffer = buffer.slice(reportedBufferLength); // Remove that first bit of message

		try {
			object = JSON.parse(rawObject);
		} catch (e) {
			self.emit('parse-error', rawObject);
			return;
		}

		self.emit('message', object); // Catch-All Event

		if (object.type == 'result') {
			self.emit(object.result.type, object);
		} else if (object.type == 'request') {
			self.emit(object.request, object);
		} else {
			self.emit(object.type, object); // Specific Event
		}

		if (buffer.length) {
			self.recursiveMessageHandler(buffer);
			return;
		}
	};

	/**
	 * Sends a message to the game server
	 */
	self.send = function(data) {
		var encodedMessage = JSON.stringify(data);

		var writeBuffer = new Buffer(encodedMessage.length + HEADER_BYTE_LENGTH);

		writeBuffer.writeUInt32BE(encodedMessage.length, 0); // Add message length to buffer
		writeBuffer.write(encodedMessage, HEADER_BYTE_LENGTH); // Add message to buffer

		netClient.write(writeBuffer);
	};

	/**
	 * Keep track of the team ID internally (not that we use it)
	 */
	self.on('greetings_program', function(data) {
		team_id = data.team_id;
	});

	/**
	 * Gets the team ID
	 */
	self.getTeamId = function() {
		return team_id;
	};
};

util.inherits(Kallisti, events.EventEmitter);
module.exports = new Kallisti();
